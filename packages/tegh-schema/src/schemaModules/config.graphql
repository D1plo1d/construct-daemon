# Queries

extend type Query {
  hostConfigs(hostID: ID!): [HostConfigForm!]!

  printerConfigs(printerID: ID!): [PrinterConfig!]!
  # components(printerID: ID!, componentID: ID): [ComponentConfigForm!]!

  materials(materialID: ID): [Material!]!
}

type HostConfigForm {
  id: ID!
}

type PrinterConfig {
  id: ID!
  components(componentID: ID): [ComponentConfigForm!]!
  plugins(package: String): [PluginConfigForm!]!
}

interface ConfigForm {
  id: ID!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!
}

type Material implements ConfigForm {
  id: ID!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!

  type: String!
  shortSummary: String!
}

type ComponentConfigForm implements ConfigForm {
  id: ID!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!

  type: String!
  name: String!
}

type PluginConfigForm implements ConfigForm {
  id: ID!
  # TODO: type should be an emum?
  package: String!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!
}

type JSONSchemaForm {
  schema: JSON!
  form: JSON!
}

# Mutations

extend type Mutation {
  updatePrinterConfigForm(printerID: ID!, configFormID: ID!, modelVersion: Int!, model: JSON!): Boolean
  updateHostConfigForm(hostID: ID!, modelVersion: Int!, model: JSON!): Boolean
}
