# Queries

extend type Query {
  hostConfigs(hostID: ID): [HostConfigForm!]!

  printerConfigs(printerID: ID): [PrinterConfig!]!
  # components(printerID: ID!, componentID: ID): [ComponentConfigForm!]!

  materials(materialID: ID): [Material!]!

  schemaForm(input: SchemaFormQueryInput!): JSONSchemaForm!
}

type HostConfigForm {
  id: ID!
}

type PrinterConfig {
  id: ID!
  components(componentID: ID): [ComponentConfigForm!]!
  plugins(package: String): [PluginConfigForm!]!
}

interface ConfigForm {
  id: ID!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!
}

type Material implements ConfigForm {
  id: ID!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!

  type: String!
  name: String!
  shortSummary: String!
}

type ComponentConfigForm implements ConfigForm {
  id: ID!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!

  type: String!
  name: String!
}

type PluginConfigForm implements ConfigForm {
  id: ID!
  package: String!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!
}

type JSONSchemaForm {
  id: ID!,
  schema: JSON!
  form: JSON!
}

input SchemaFormQueryInput {
  collection: ConfigCollection!
  """
    printerID is required for PRINTER ConfigCollection config forms
  """
  printerID: ID
  # TODO: host conig support
  # """
  #   hostID is required for HOST ConfigCollection config forms
  # """
  # hostID: ID

  # TODO: plugin schema form support
  # for plugins the schemaFormKey is the plugin's package
  """
    for components and materials the schemaFormKey is the component/material's type
  """
  schemaFormKey: ID!
}


# Mutations

extend type Mutation {
  createConfig(input: CreateConfigInput!): SetConfigResponse
  updateConfig(input: UpdateConfigInput!): SetConfigResponse
  deleteConfig(input: DeleteConfigInput!): Boolean
}

input CreateConfigInput {
  collection: ConfigCollection!
  """
    The type of the component/material or the package of the plugin
  """
  schemaFormKey: String!
  """
    printerID is required for PLUGIN and COMPONENT ConfigCollection config forms
  """
  printerID: ID
  # TODO: host conig support
  # """
  #   hostID is required for HOST ConfigCollection config forms
  # """
  # hostID: ID
  model: JSON!
}

input UpdateConfigInput {
  collection: ConfigCollection!
  """
    printerID is required for PLUGIN and COMPONENT ConfigCollection config forms
  """
  printerID: ID
  # TODO: host conig support
  # """
  #   hostID is required for HOST ConfigCollection config forms
  # """
  # hostID: ID
  configFormID: ID!
  modelVersion: Int!
  model: JSON!
}

input DeleteConfigInput {
  collection: ConfigCollection!
  """
    printerID is required for PRINTER ConfigCollection config forms
  """
  printerID: ID
  # TODO: host conig support
  # """
  #   hostID is required for HOST ConfigCollection config forms
  # """
  # hostID: ID
  configFormID: ID!
}

type SetConfigResponse {
  errors: [JSONSchemaError!]
}

type JSONSchemaError {
  """
    validation keyword.
  """
  keyword: String!
  """
    the path to the part of the data that was validated using
    the RFC6901 JSON pointer standard (e.g., "/prop/1/subProp").
  """
  dataPath: String!
  """
    the path (JSON-pointer as a URI fragment) to the schema of the keyword that
    failed validation.
  """
  schemaPath: String!
  """
    the object with the additional information about error that can be used to
    create custom error messages (e.g., using ajv-i18n package). See below for
    parameters set by all keywords.
  """
  params: JSON!
  """
    the standard error message
  """
  message: String!
}

"""
  Each config model encapsulates a PLUGIN, COMPONENT, MATERIAL or HOST.

  The collection enables tegh combinators to route configuration changes to
  the correct delegate tegh host.

  Host collection is reserved for future use.
"""
enum ConfigCollection {
  PLUGIN,
  COMPONENT,
  MATERIAL,
  HOST,
}
