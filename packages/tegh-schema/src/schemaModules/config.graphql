# Queries

extend type Query {
  hostConfigs(hostID: ID!): [HostConfigForm!]!

  printerConfigs(printerID: ID!): [PrinterConfig!]!
  # components(printerID: ID!, componentID: ID): [ComponentConfigForm!]!

  materials(materialID: ID): [Material!]!
}

type HostConfigForm {
  id: ID!
}

type PrinterConfig {
  id: ID!
  components(componentID: ID): [ComponentConfigForm!]!
  plugins(package: String): [PluginConfigForm!]!
}

interface ConfigForm {
  id: ID!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!
}

type Material implements ConfigForm {
  id: ID!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!

  type: String!
  shortSummary: String!
}

type ComponentConfigForm implements ConfigForm {
  id: ID!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!

  type: String!
  name: String!
}

type PluginConfigForm implements ConfigForm {
  id: ID!
  # TODO: type should be an emum?
  package: String!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!
}

type JSONSchemaForm {
  schema: JSON!
  form: JSON!
}

# Mutations

extend type Mutation {
  setConfig(input: SetConfigInput!): SetConfigResponse
}

input SetConfigInput {
  """
    Each config form is either a part of a PRINTER, MATERIAL or HOST.
    The routingMode enables tegh combinators to route configuration changes to
    the correct delegate tegh host.

    Components and plugins must use PRINTER routingMode.
    Materials must use MATERIAL routingMode.
    Host routingMode is reserved for future use.
  """
  routingMode: ConfigRoutingMode!
  """
    printerID is required for PRINTER ConfigRoutingMode config forms
  """
  printerID: ID
  """
    hostID is required for HOST ConfigRoutingMode config forms
  """
  hostID: ID
  configFormID: ID!
  modelVersion: Int!
  model: JSON!
}

type SetConfigResponse {
  errors: [JSONSchemaError!]
}

type JSONSchemaError {
  """
    validation keyword.
  """
  keyword: String!
  """
    the path to the part of the data that was validated using
    the RFC6901 JSON pointer standard (e.g., "/prop/1/subProp").
  """
  dataPath: String!
  """
    the path (JSON-pointer as a URI fragment) to the schema of the keyword that
    failed validation.
  """
  schemaPath: String!
  """
    the object with the additional information about error that can be used to
    create custom error messages (e.g., using ajv-i18n package). See below for
    parameters set by all keywords.
  """
  params: JSON!
  """
    the standard error message
  """
  message: String!
}

enum ConfigRoutingMode {
  PRINTER,
  MATERIAL,
  HOST,
}
