# Queries

extend type Query {
  hostConfigs(hostID: ID!): [HostConfigForm!]!

  printerConfigs(printerID: ID!): [PrinterConfig!]!
  # components(printerID: ID!, componentID: ID): [ComponentConfigForm!]!

  materials(materialID: ID): [Material!]!
}

type HostConfigForm {
  id: ID!
}

type PrinterConfig {
  id: ID!
  components(componentID: ID): [ComponentConfigForm!]!
  plugins(package: String): [PluginConfigForm!]!
}

interface ConfigForm {
  id: ID!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!
}

type Material implements ConfigForm {
  id: ID!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!

  type: String!
  shortSummary: String!
}

type ComponentConfigForm implements ConfigForm {
  id: ID!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!

  type: String!
  name: String!
}

type PluginConfigForm implements ConfigForm {
  id: ID!
  # TODO: type should be an emum?
  package: String!
  model: JSON!
  modelVersion: Int!
  schemaForm: JSONSchemaForm!
}

type JSONSchemaForm {
  schema: JSON!
  form: JSON!
}

# Mutations

extend type Mutation {
  setConfig(input: SetConfigInput!): Boolean
}

input SetConfigInput {
  """
    Each config form is either a part of a PRINTER, MATERIAL or HOST.
    The routingMode enables tegh combinators to route configuration changes to
    the correct delegate tegh host.
  """
  routingMode: ConfigRoutingMode!
  printerID: ID
  hostID: ID
  configFormID: ID!
  modelVersion: Int!
  model: JSON!
}

enum ConfigRoutingMode {
  PRINTER,
  MATERIAL,
  HOST,
}
