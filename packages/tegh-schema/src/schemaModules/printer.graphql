# Queries

extend type Query {
  teghVersion: String!
  hasPendingUpdates: Boolean!
  isConfigured: Boolean!
  printers(printerID: ID): [Printer!]!
}

type Printer {
  id: ID!
  name: String!

  """
  The machine configuration for general settings.
  """
  configForm: ConfigForm!

  components(componentID: ID): [Component!]!
  plugins(package: String): [Plugin!]!

  availablePackages: [String!]!

  fixedListComponentTypes: [String!]!

  """
  The estimated number of seconds until the heater(s) reach their
  targetTemperature.
  """
  targetTemperaturesCountdown: Float

  """
  The active extruder ID
  """
  activeExtruderID: String
  motorsEnabled: Boolean!
  status: PrinterStatusEnum!
  error: PrinterError
  enabledMacros: [String!]!
  logEntries(level: String, sources: [String!], limit: Int): [LogEntry!]

  temperatureHistory: [TemperatureHistoryEntry!]!
  movementHistory: [MovementHistoryEntry!]!
}

type Plugin {
  id: ID!
  package: String!
  configForm: ConfigForm!
  isEssential:  Boolean!
}

type Component {
  id: ID!
  name: String!
  type: String!
  address: String

  configForm: ConfigForm!

  """
  set if this component contains a heater. Null for non-heater components.
  """
  heater: Heater
  """
  set if this component is a fan. Null for all other components.
  """
  fan: Fan

  """
  set if this component is an axis. Null for all other components.
  """
  axis: Axis
}

type Fan {
  """
  True if the fan is on.
  """
  enabled: Boolean!

  """
  The speed of the fan as a percentage of full speed (range: 0 to 100).
  """
  speed: Int!
}

type Heater {
  """
  The target temperature in °C for this heater. The heater will attempt to make
  the current_temp equal to this temperature.
  """
  targetTemperature: Float

  """
  The current temperature in °C recorded by the heater’s thermocouple or
  thermister.
  """
  currentTemperature: Float!

  """
  True if the printer is waiting on this heater to reach it’s targetTemp and
  preventing any more gcodes from executing until it does.
  """
  blocking: Boolean!
}

type Axis {
  id: ID!
  """
  The current position in mm.
  """
  position: Float!
}

type TemperatureDataPoint {
  address: String!
  targetTemperature: Float!
  currentTemperature: Float!
}

type TemperatureHistoryEntry {
  id: ID!
  createdAt: DateTime!
  temperatures: [TemperatureDataPoint!]!
}

type MovementDataPoint {
  address: String!
  value: Float!
}

type MovementHistoryEntry {
  id: ID!
  createdAt: DateTime!
  position: [MovementDataPoint!]!
  inboundFeedrate: Float!
}

type LogEntry {
  id: ID!
  createdAt: DateTime!
  source: String!
  level: String!
  message: String!
}

type PrinterError {
  """
  A machine-readable code indicating the type of error
  """
  code: String!

  """
  A human-readable description of the error
  """
  message: String!
}

enum PrinterStatusEnum {
  """
  The printer is being initialized. Attempting to spool anything will result in an error.
  """
  CONNECTING

  """The printer is connected and able to spool tasks/jobs."""
  READY

  """
  The printer is printing a job. Attempting to spool anything will result in an error.
  """
  PRINTING

  """
  The printer is disconnected or turned off. Attempting to spool anything will result in an error.
  """
  DISCONNECTED

  """
  The printer is being initialized. Attempting to spool anything except for an
  emergency macro (ie. reset) will result in an error. Spool the `reset` macro
  to reset the error and change the status to `CONNECTING`.
  """
  ERRORED

  """
  The printer is estopped. Attempting to spool anything except for an emergency
  macro (ie. reset) will result in an error. Spool the `reset` macro to reset
  the estop and change the status to `CONNECTING`.
  """
  ESTOPPED
}
