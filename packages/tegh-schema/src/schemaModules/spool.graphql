# Mutations

extend type Mutation {
  """
  Spools and executes GCode outside of the job queue.

  execGCodes is synchronous and will return only once the GCode has executed
  and any resulting machine movements are done.

  This means that for example if you use execGCodes to run `G1 X100` the
  mutation will wait until the printer has moved 100mm and then return.

  This can be useful for informing users whether an action is in progress or
  completed.

  If the printer errors during the execution of the GCode the mutation will
  fail.

  See ExecGCodesInput.gcodes for GCode formatting options.
  """
  execGCodes(input: ExecGCodesInput!): Task!

  """
  Starts a print by spooling a task to print the job file.
  """
  spoolJobFile(input: SpoolJobFileInput!): Task!
}

input ExecGCodesInput {
  printerID: ID!

  """
  Tegh supports 3 formats of GCode:

  1. Standard GCode Strings
    eg. `gcodes: ["G1 X10", "G1 Y20"]`
    and equivalently:
    `gcodes: ["G1 X0\nG1 Y0"]`
  2. JSON GCode Objects - To make constructing GCode easier with modern languages Tegh allows GCodes to be sent as JSON objects in the format { [GCODE|MACRO]: ARGS }.
    eg. `gcodes: [{ g1: { x: 10 } }, { g1: { y: 20 } }]`
    Macros can also be called using JSON GCode Objects.
    eg. `gcodes: [{ g1: { x: 10 } }, { delay: { period: 5000 } }]`
  3. JSON GCode Strings - Tegh allows GCodes to be serialized as JSON. JSON GCode Strings can also be Macro calls.
    GCode: `gcodes: ["{ \"g1\": { \"x\": 10 } }", "{ \"delay\": { \"period\": 5000 } }"]`
  """
  gcodes: [JSON!]!
}

input SpoolJobFileInput {
  printerID: ID!
  jobFileID: ID!
}

"""
A spooled set of gcodes to be executed by the printer
"""
type Task {
  id: ID!
  name: String!
  currentLineNumber: Int
  totalLineNumbers: Int!
  percentComplete(
    """
    The number of digits to the right of the decimal place to round to. eg.
    `digits: 0` => 83 `digits: 1` => 82.6 `digits: 2` => 82.62
    """
    digits: Int
  ): Float!
  createdAt: DateTime!
  startedAt: DateTime
  stoppedAt: DateTime
  status: String!
  printer: Printer!
}
