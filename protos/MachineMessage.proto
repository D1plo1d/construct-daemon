syntax = "proto3";
package teg_protobufs;

// Machines send MachineMessages
message MachineMessage {
  // repeated uint32 ack_message_ids = 1;

  oneof payload {
    Feedback feedback = 9;
  }

  message Feedback {
    uint32 despooled_line_number = 1;
    Status status = 2;

    // 3-7: Frequently used sub-messages
    // Events may be duplicated and sent more then once.
    repeated Event events = 3;
    repeated Axis axes = 4;
    repeated Heater heaters = 5;
    repeated SpeedController speed_controllers = 6;

    // Raw response strings from the device.No guarentee is made that all
    // responses received will be relayed to the combinator. A best effort
    // attempt will be made to relay responses within a performance constraint.
    //
    // Responses will not be duplicated and will be sent at most once to each
    // client.
    repeated GCodeHistoryEntry gcode_history = 7;

    // // 8-15: Frequently used bools
    // bool sets_target_temperatures = 8;
    // bool sets_actual_temperatures = 9;
    // bool sets_target_position = 10;
    // bool sets_actual_position = 11;

    repeated TaskProgress task_progress = 15;

    // Less frequently set fields (field numbers 16 through 2047 take 2 bytes)

    // 100-999 Less frequently set sub-messages
    Error error = 100;

    // 1000-2047: Less frequently set bools start
    bool motors_enabled = 1000;
  }



  enum Status {
    ERRORED = 0;
    ESTOPPED = 1;
    DISCONNECTED = 2;
    CONNECTING = 3;
    READY = 4;
  }

  message Error {
    string message = 1;
    // 2: reserved for future error codes implementation
    // string code = 2;
  }

  message TaskProgress {
    string task_id = 1;
    uint32 despooled_line_number = 2;
    TaskStatus status = 3;
  }

  enum TaskStatus {
      // Before sending to the driver
      // SPOOLED;
      // After sending to the driver
      TASK_STARTED = 0;
      TASK_FINISHED = 1;
      TASK_PAUSED = 2;
      TASK_CANCELLED = 3;
      TASK_ERRORED = 4;
  }

  // Legacy NodeJS Type
  enum EventType {
    CANCELLED = 0;
    PAUSE_TASK = 1;
    ERROR = 2;
    START_TASK = 3;
    FINISH_TASK = 4;
  }

  // Legacy NodeJS Type
  message Event {
    string task_id = 1;
    string client_id = 2;

    EventType type = 8;

    // the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka "UNIX timestamp")
    int64 created_at = 9;

    Error error = 10;
  }

  message Axis {
    string address = 1;

    // Positions are in mm
    float target_position = 2;
    float actual_position = 3;
    bool homed = 4;
  }

  message Heater {
    string address = 1;

    // Temperatures are in celsius
    float target_temperature = 2;
    float actual_temperature = 3;

    bool enabled = 4;
    bool blocking = 5;
  }

  message SpeedController {
    string address = 1;

    // Speeds are is in RPM. > 0: clockwise, < 0: counterclockwise.
    float target_speed = 2;
    float actual_speed = 3;

    bool enabled = 4;
  }

  enum GCodeHistoryDirection {
    RX = 0;
    TX = 1;
  }

  // Raw response strings from the device correlated to the task + line number
  // that preceeded them.
  message GCodeHistoryEntry {
    GCodeHistoryDirection direction = 3;
    string content = 4;
  }
}
